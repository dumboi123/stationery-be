services:
  # API Gateway (Node.js)
  api-gateway:
    build:
      context: ./services/api-gateway
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DEBUG=*
      - PORT=3000
      - USER_SERVICE_URL=http://user-service:8080
      - PRODUCT_SERVICE_URL=http://product-service:8000
      - ORDER_SERVICE_URL=http://order-service:8082
      - PAYMENT_SERVICE_URL=http://payment-service:8081
      - NOTIFICATION_SERVICE_URL=http://notification-service:3001
      - INVENTORY_SERVICE_URL=http://inventory-service:8084
      - CART_SERVICE_URL=http://cart-service:3002
      - BLOG_SERVICE_URL=http://blog-service:3003
      - ANALYTICS_SERVICE_URL=http://analytics-service:8083
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=bluesky
    depends_on:
      - redis
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    networks:
      - microservices

  # User Service (Go)
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=user_db
      - DB_USER=admin
      - DB_PASSWORD=password
      - JWT_SECRET=your-secret-key
    depends_on:
      - postgres
      # - kafka
    networks:
      - microservices

  # Product Service (Node.js)
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/product_db?authSource=admin
    depends_on:
      - mongodb
    volumes:
      - ./services/product-service:/app
      - /app/node_modules
    networks:
      - microservices

  # Order Service (Java)
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - SPRING_PROFILES_ACTIVE=development
      - ORACLE_URL=oracle://admin:password@oracle:1521/XEPDB1
    depends_on:
      - oracle
    networks:
      - microservices

  # Payment Service (Go)
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=payment_db
      - DB_USER=admin
      - DB_PASSWORD=password
    depends_on:
      - postgres
    networks:
      - microservices

  # Notification Service (Node.js)
  notification-service:
    build:
      context: ./services/notification-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    networks:
      - microservices

  # Inventory Service (Go)
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - MONGODB_URL=mongodb://admin:password@mongodb:27017/inventory_db?authSource=admin
    depends_on:
      - mongodb
    networks:
      - microservices

  # Cart Service (Node.js)
  cart-service:
    build:
      context: ./services/cart-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - REDIS_PASSWORD=password
    depends_on:
      - redis
    volumes:
      - ./services/cart-service:/app
      - /app/node_modules
    networks:
      - microservices

  # Blog Service (Node.js)
  blog-service:
    build:
      context: ./services/blog-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=blog_db
      - DB_USER=admin
      - DB_PASSWORD=password
    depends_on:
      - postgres
    volumes:
      - ./services/blog-service:/app
      - /app/node_modules
    networks:
      - microservices

  # Analytics Service (Java)
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - SPRING_PROFILES_ACTIVE=development
      - ORACLE_URL=oracle://admin:password@oracle:1521/XEPDB1
    depends_on:
      - oracle
    networks:
      - microservices

  # PostgreSQL Database (User, Payment, Blog Services)
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=microservices_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=user_db,payment_db,blog_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - microservices

  # MongoDB Database (Product, Inventory Services)
  mongodb:
    image: mongo:5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=microservices_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - microservices

  # Oracle Database (Order, Analytics Services)
  oracle:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    environment:
      - ORACLE_PWD=password
      - ORACLE_CHARACTERSET=AL32UTF8
      - ORACLE_DATABASE=XEPDB1
      - ORACLE_USER=admin
      - ORACLE_PASSWORD=password
    ports:
      - "1521:1521"
      - "5500:5500"
    volumes:
      - oracle_data:/opt/oracle/oradata
      - ./database/oracle/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices

  # Redis Cache (All Services)
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes --requirepass bluesky
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices

  # Nginx Load Balancer (Development)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
    networks:
      - microservices
    profiles:
      - production # Only start in production

volumes:
  postgres_data:
  mongodb_data:
  oracle_data:
  redis_data:

networks:
  microservices:
    driver: bridge
