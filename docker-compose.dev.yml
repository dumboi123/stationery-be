version: '3.8'

services:
  api-gateway:
    build:
      context: ./services/api-gateway
      target: development
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=*

  user-service:
    volumes:
      - ./services/user-service:/app
    environment:
      - GO_ENV=development

  product-service:
    volumes:
      - ./services/product-service:/app
    environment:
      - PYTHON_ENV=development
      - DEBUG=true

  notification-service:
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=*

  # Development tools
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - microservices

  # MongoDB Admin Interface
  mongo-express:
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    ports:
      - "8082:8081"
    depends_on:
      - mongodb
    networks:
      - microservices

  # Oracle Database Admin (Oracle SQL Developer Web)
  oracle-apex:
    image: container-registry.oracle.com/database/sqlcl:latest
    environment:
      - ORACLE_HOST=oracle
      - ORACLE_PORT=1521
      - ORACLE_SERVICE=XEPDB1
      - ORACLE_USER=admin
      - ORACLE_PASSWORD=password
    ports:
      - "8080:8080"
    depends_on:
      - oracle
    networks:
      - microservices

  # Redis Admin Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - microservices

  # Elasticsearch Admin Interface
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - microservices

  # Kafka Admin Interface
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - microservices

  # Database debugging tools
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - mongodb
      - oracle
    networks:
      - microservices

  # Development monitoring
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    ports:
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - microservices

volumes:
  portainer_data:
